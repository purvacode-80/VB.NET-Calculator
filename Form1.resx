<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>